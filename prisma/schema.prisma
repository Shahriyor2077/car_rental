// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model companies {
  id             BigInt     @id @default(autoincrement())
  name           String
  address        String
  phone          String
  license_number String
  created_at     DateTime   @default(now())
  branches       branches[]

  @@map("company")
}

model branches {
  id         BigInt   @id @default(autoincrement())
  name       String
  address    String
  company_id BigInt
  phone      String
  created_at DateTime @default(now())
  company    companies @relation(fields: [company_id], references: [id])
  cars       car[]

  @@map("branch")
}

model car {
  id              BigInt   @id @default(autoincrement())
  branch_id       BigInt
  brand           String
  model           String
  year            String
  color           BigInt
  mileage         BigInt
  price_per_day   String
  is_available    Boolean
  created_at      DateTime @default(now())
  branch          branches @relation(fields: [branch_id], references: [id])
  car_images      car_images[]
  car_maintenance car_maintenance[]
  car_feature     car_feature[]
  rentals         rentals[]
  reviews         reviews[]

  @@map("car")
}

model car_images {
  id     BigInt @id @default(autoincrement())
  car_id BigInt
  image  String
  car    car    @relation(fields: [car_id], references: [id])

  @@map("car_image")
}

model car_maintenance {
  id          BigInt   @id @default(autoincrement())
  car_id      BigInt
  service_date String
  description String
  cost        Decimal
  car         car      @relation(fields: [car_id], references: [id])

  @@map("car_maintenance")
}

model car_feature {
  id         BigInt  @id @default(autoincrement())
  car_id     BigInt
  feature_id BigInt
  car        car     @relation(fields: [car_id], references: [id])
  feature    feature @relation(fields: [feature_id], references: [id])

  @@map("car_feature")
}

model feature {
  id          BigInt        @id @default(autoincrement())
  name        String
  car_feature car_feature[]

  @@map("feature")
}

model rentals {
  id          BigInt   @id @default(autoincrement())
  user_id     BigInt
  car_id      BigInt
  start_date  String
  end_date    String
  total_price Decimal
  status      RentalStatus
  created_at  DateTime @default(now())
  car         car      @relation(fields: [car_id], references: [id])
  user        user     @relation(fields: [user_id], references: [id])
  damages     damages[]
  payments    payments[]
  complaints  complaints[]

  @@map("rentals")
}

model damages {
  id            BigInt   @id @default(autoincrement())
  rental_id     BigInt
  description   String
  cost_estimate String
  damage_date   DateTime
  rental        rentals  @relation(fields: [rental_id], references: [id])

  @@map("damages")
}

model payments {
  id             BigInt   @id @default(autoincrement())
  rental_id      BigInt
  amount         Decimal
  payment_date   DateTime
  payment_method PaymentMethod
  status         PaymentStatus
  rental         rentals  @relation(fields: [rental_id], references: [id])

  @@map("payments")
}

model user {
  id            BigInt   @id @default(autoincrement())
  full_name     String
  phone         String
  email         String   @unique
  password      String
  birthday      String
  is_active     Boolean  @default(false)
  activation_link String?
  rentals       rentals[]
  reviews       reviews[]
  documents     documents[]
  notifications notifications[]
  complaints    complaints[]

  @@map("user")
}

model reviews {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  car_id     BigInt
  rating     String
  created_at DateTime @default(now())
  user       user     @relation(fields: [user_id], references: [id])
  car        car      @relation(fields: [car_id], references: [id])

  @@map("reviews")
}

model documents {
  id             BigInt   @id @default(autoincrement())
  user_id        BigInt
  deliver_license String
  created_at     DateTime @default(now())
  user           user     @relation(fields: [user_id], references: [id])

  @@map("documents")
}

model notifications {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  message    String
  created_at DateTime @default(now())
  user       user     @relation(fields: [user_id], references: [id])

  @@map("notifications")
}

model complaints {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  message    String
  rental_id  BigInt
  created_at DateTime @default(now())
  user       user     @relation(fields: [user_id], references: [id])
  rental     rentals  @relation(fields: [rental_id], references: [id])

  @@map("complaints")
}

enum RentalStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
}

enum AdminRole {
  ADMIN
  MANAGER
}

model admin {
  id        BigInt    @id @default(autoincrement())
  full_name String
  email     String    @unique
  password  String
  role      AdminRole @default(MANAGER)
  created_at DateTime @default(now())

  @@map("admin")
}